{
    "version": 3,
    "file": "js/906.js",
    "mappings": "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",
    "sources": [
        "webpack://aprover-site/./src/js/asymmetricEncryption.js",
        "webpack://aprover-site/./src/js/asymmetricPrivateKey.js",
        "webpack://aprover-site/./src/js/asymmetricPublicKey.js",
        "webpack://aprover-site/./src/js/bitstring.js",
        "webpack://aprover-site/./src/js/CommandDelete.js",
        "webpack://aprover-site/./src/js/DragConnectionCreatePolicy2.js",
        "webpack://aprover-site/./src/js/Group.js",
        "webpack://aprover-site/./src/js/hash.js",
        "webpack://aprover-site/./src/js/idCertificate.js",
        "webpack://aprover-site/./src/js/LabelRight.js",
        "webpack://aprover-site/./src/js/mac.js",
        "webpack://aprover-site/./src/js/FlowPortsFeedbackPolicy.js",
        "webpack://aprover-site/./src/js/Message.js",
        "webpack://aprover-site/./src/js/nonce.js",
        "webpack://aprover-site/./src/js/Parser.js",
        "webpack://aprover-site/./src/js/signature.js",
        "webpack://aprover-site/./src/js/symmetricEncryption.js",
        "webpack://aprover-site/./src/js/symmetricKey.js",
        "webpack://aprover-site/./src/js/Toolbar.js",
        "webpack://aprover-site/./src/js/View.js",
        "webpack://aprover-site/./src/js/bootstrap.js",
        "webpack://aprover-site/./src/js/import-jquery.js"
    ],
    "sourcesContent": [
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"asymmetricEncryption\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#540804\",\n            color: \"#430603\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n        var labelKey = new draw2d.shape.basic.Label({\n            text: \"Public Key\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelKnowledge = new draw2d.shape.basic.Label({\n            text: \"Knowledge\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelCiphertext = new LabelRight({\n            text: \"Ciphertext\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var input1 = labelKey.createPort(\"input\");\n        input1.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input1.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input1.setSemanticGroup(\"asympubkey\");\n        input1.setName(\"input_\" + labelKey.id);\n        input1.setColor(\"#47D7AC\");\n        input1.setBackgroundColor(\"#47D7AC\");\n        input1.setMaxFanOut(1);\n\n        var input2 = labelKnowledge.createPort(\"input\");\n        input2.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input2.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input2.setName(\"input_\" + labelKnowledge.id);\n        input2.setColor(\"#04773b\");\n        input2.setBackgroundColor(\"#04773b\");\n        input2.setMaxFanOut(1);\n\n        var output = labelCiphertext.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelCiphertext.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true,\n            padding: { top: 5 }\n        });\n\n        container.addRow(labelKey, labelCiphertext);\n        //container.setCellAlign(0, 1, \"right\");\n        container.addRow(labelKnowledge);\n\n        this.add(container);\n\n        input2.on(\"connect\", (element, event) => {\n            var connections = input2.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n        input1.on(\"connect\", (element, event) => {\n            var connections = input1.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        output.on(\"change:value\", (element, event) => {\n            var connections = output.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    },\n\n    textify: function (knowledge, key) {\n        if (knowledge !== null && key !== null) {\n            return '{' + knowledge + '}<sub>' + key + '<sub>'\n        }\n    },\n\n    getOutputPorts: function () {\n        var outport = this.getChildren().get(1).getChildren().get(1).getPorts().get(0);\n       \n        return outport;\n    },\n\n    getInputPorts: function () {\n        var inports = new draw2d.util.ArrayList();\n        var inport1 = this.getChildren().get(1).getChildren().get(0).getPorts().get(0);\n        var inport2 = this.getChildren().get(1).getChildren().get(2).getPorts().get(0);\n       \n        inports.add(inport1);\n        inports.add(inport2);\n        return inports\n    },\n    /**\n    * @method\n    * Called if the value of any port has been changed\n    *\n    * @param {draw2d.Port} relatedPort\n    * @template\n    */\n    onPortValueChanged: function (relatedPort) {\n        var data = [];\n        this.getInputPorts().each(function (i, port) {\n            data.push(port.getValue());\n        });\n        //this.getOutputPorts().get(0).setValue('{' + data[1] + '}<sub>' + data[0] + '<sub>')\n        this.getOutputPorts().setValue('{' + data[1] + '}<sub>' + data[0] + '</sub>');\n        //console.log(this.getOutputPorts().getValue());\n    }\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"asymmetricPrivateKey\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FFFFFF\",\n            bgColor: \"#7AE1BF\",\n            color:\"#61B498\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n\n        var labelBitstring = new LabelRight({\n            text: \"Key 1\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n\n\n        var output = labelBitstring.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setSemanticGroup(\"asymprivkey\");\n        output.setName(\"output_\" + labelBitstring.id);\n        output.setColor(\"#7AE1BF\");\n        output.setBackgroundColor(\"#7AE1BF\");\n\n\n\n\n\n\n\n        this.add(labelBitstring);\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    }\n\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"asymmetricPublicKey\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FFFFFF\",\n            bgColor: \"#47D7AC\",\n            color:\"#38AC89\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n\n        var labelBitstring = new LabelRight({\n            text: \"Key 1\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n\n\n        var output = labelBitstring.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setSemanticGroup(\"asympubkey\");\n        output.setName(\"output_\" + labelBitstring.id);\n        output.setColor(\"#47D7AC\");\n        output.setBackgroundColor(\"#47D7AC\");\n        output.setValue(\"PUBKB\");\n\n\n\n\n\n\n        this.add(labelBitstring);\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    }\n\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"bitstring\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#007749\",\n            color:\"#005F3A\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n\n        var labelBitstring = new LabelRight({\n            text: \"String 1\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n\n\n        var output = labelBitstring.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelBitstring.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n\n\n\n\n\n        this.add(labelBitstring);\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    }\n\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\n\nexport default draw2d.command.Command.extend({\n\n    NAME: \"CommandDelete\",\n\n    /**\n     * @constructor\n     * Create a delete command for the given figure.\n     * \n     * @param {draw2d.Figure} figure\n     */\n    init: function( figure)\n    {\n       this._super();\n       \n       this.parent   = figure.getParent();\n       this.figure   = figure;\n       this.canvas   = figure.getCanvas();\n       this.connections = null;\n       this.removedParentEntry = null; // can be null if the figure didn't have any parent shape assigned\n       this.indexOfChild = -1;\n    },\n\n\n    /**\n     * @method\n     * Returns [true] if the command can be execute and the execution of the\n     * command modifies the model. e.g.: a CommandMove with [startX,startX] == [endX,endY] should\n     * return false. The execution of this Command doesn't modify the model.\n     *\n     * @return {Boolean} return try if the command modify the model or make any relevant changes\n     **/\n    canExecute: function()\n    {\n        // we can only delete the figure if its part of the canvas.\n        return this.figure.getCanvas()!==null;\n    },\n\n    /**\n     * @method\n     * Execute the command the first time\n     * \n     **/\n    execute: function()\n    {\n       this.redo();\n    },\n    \n    /**\n     * @method\n     * Undo the command\n     *\n     **/\n    undo: function()\n    {\n        if(this.parent!==null){\n            console.log(this.removedParentEntry[0][0])\n            this.parent.addIndexRow(this.removedParentEntry[0][0],this.indexOfChild);\n            this.canvas.setCurrentSelection(this.parent.parent);\n        }\n       \n        \n        if(this.figure instanceof draw2d.Connection){\n           this.figure.reconnect();\n        }\n    \n         \n        for (var i = 0; i < this.connections.getSize(); ++i){\n           this.canvas.add(this.connections.get(i));\n           this.connections.get(i).reconnect();\n        }\n    },\n\n    /**\n     * @method\n     * \n     * Redo the command after the user has undo this command\n     *\n     **/\n    redo: function()\n    {\n       this.canvas.setCurrentSelection(null);\n        \n       // Collect all connections that are bounded to the figure to delete. This connections\n       // must be deleted too.\n       //\n       if(this.connections===null)\n       {\n          if(this.figure instanceof draw2d.shape.node.Node){\n              this.connections = this.figure.getConnections();\n          }\n          else{\n              this.connections = new draw2d.util.ArrayList();\n          }\n       }\n       \n   // already done in the canvas.remove(..) method\n   //    if(this.figure instanceof draw2d.Connection){\n   //        this.figure.disconnect();\n   //    }\n\n\n       // remove all connections\n       //\n       for (var i = 0; i < this.connections.getSize(); ++i){\n           this.canvas.remove(this.connections.get(i));\n       }\n\n       // remove this figure from the parent \n       //\n       if(this.parent!==null){\n           // determine the index of the child before remove\n          this.indexOfChild = this.parent.getIndex(this.figure);\n          this.removedParentEntry= this.parent.removeRow(this.indexOfChild);\n       }\n      \n    }\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\n\nexport default draw2d.policy.connection.ConnectionCreatePolicy.extend({\n\n    NAME: \"DragConnectionCreatePolicy2\",\n\n    /**\n     * @constructor\n     *\n     * Creates a new connection create policy instance\n     */\n    init: function (attr, setter, getter) {\n        this._super(attr, setter, getter);\n\n        this.mouseDraggingElement = null;\n        this.currentDropTarget = null;\n        this.currentTarget = null;\n    },\n\n    /**\n     * @method\n     *\n     * @param {draw2d.Canvas} canvas\n     * @param {Number} x the x-coordinate of the mouse down event\n     * @param {Number} y the y-coordinate of the mouse down event\n     * @param {Boolean} shiftKey true if the shift key has been pressed during this event\n     * @param {Boolean} ctrlKey true if the ctrl key has been pressed during the event\n     */\n    onMouseDown: function (canvas, x, y, shiftKey, ctrlKey) {\n        //just consider ports\n        //\n        var port = canvas.getBestFigure(x, y);\n\n\n        // nothing found at all\n        //\n        if (port === null) {\n            return;\n        }\n\n        // may there is a resize handle below the port or another figure\n        // in this case the ResizeHandle has prio. and handled by another\n        // Policy\n        if (!(port instanceof draw2d.Port)) {\n            return;\n        }\n\n        // this can happen if the user release the mouse button outside the window during a drag&drop\n        // operation. In this case we must fire the \"onDragEnd\" event postpond.\n        //\n        if (port.isInDragDrop === true) {\n            port.onDragEnd(x, y, shiftKey, ctrlKey);\n            port.isInDragDrop = false;\n        }\n\n        // introspect the port only if it is draggable at all\n        //\n        if (port.isDraggable()) {\n            var canDragStart = port.onDragStart(x - port.getAbsoluteX(), y - port.getAbsoluteY(), shiftKey, ctrlKey);\n            if (canDragStart) {\n                port.fireEvent(\"dragstart\", { x: x - port.getAbsoluteX(), y: y - port.getAbsoluteY(), shiftKey: shiftKey, ctrlKey: ctrlKey });\n            }\n\n            // Element send a veto about the drag&drop operation\n            this.mouseDraggingElement = canDragStart === false ? null : port;\n            this.mouseDownElement = port;\n        }\n    },\n\n    /**\n     * @method\n     *\n     * @param {draw2d.Canvas} canvas\n     * @param {Number} dx The x diff between start of dragging and this event\n     * @param {Number} dy The y diff between start of dragging and this event\n     * @param {Number} dx2 The x diff since the last call of this dragging operation\n     * @param {Number} dy2 The y diff since the last call of this dragging operation\n     * @template\n     */\n    onMouseDrag: function (canvas, dx, dy, dx2, dy2, shiftKey, ctrlKey) {\n        try {\n            if (this.mouseDraggingElement !== null) {\n                var de = this.mouseDraggingElement;\n                var ct = this.currentTarget;\n\n                de.isInDragDrop = true;\n                de.onDrag(dx, dy, dx2, dy2, shiftKey, ctrlKey);\n\n                var target = canvas.getBestFigure(de.getAbsoluteX(), de.getAbsoluteY(), de);\n\n                // the hovering element has been changed\n                if (target !== ct) {\n                    if (ct !== null) {\n                        ct.onDragLeave(de);\n                        ct.fireEvent(\"dragLeave\", { draggingElement: de });\n                        de.editPolicy.each(function (i, e) {\n                            if (e instanceof draw2d.policy.port.FlowPortsFeedbackPolicy) {\n                                e.onHoverLeave(canvas, de, ct);\n                            }\n                        });\n                    }\n\n                    // possible hoverEnter event\n                    //\n                    if (target !== null) {\n                        this.currentTarget = ct = target.delegateTarget(de);\n                        if (ct !== null) {\n                            ct.onDragEnter(de); // legacy\n                            ct.fireEvent(\"dragEnter\", { draggingElement: de });\n                            de.editPolicy.each(function (i, e) {\n                                if (e instanceof draw2d.policy.port.FlowPortsFeedbackPolicy) {\n                                    e.onHoverEnter(canvas, de, ct);\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        this.currentTarget = null;\n                    }\n                }\n\n\n                var p = canvas.fromDocumentToCanvasCoordinate(canvas.mouseDownX + (dx / canvas.zoomFactor), canvas.mouseDownY + (dy / canvas.zoomFactor));\n                var target = canvas.getBestFigure(p.x, p.y, this.mouseDraggingElement);\n\n                if (target !== this.currentDropTarget) {\n                    if (this.currentDropTarget !== null) {\n                        this.currentDropTarget.onDragLeave(this.mouseDraggingElement);\n                        this.currentDropTarget.fireEvent(\"dragLeave\", { draggingElement: this.mouseDraggingElement });\n                        this.currentDropTarget = null;\n                    }\n                    if (target !== null) {\n                        this.currentDropTarget = target.delegateTarget(this.mouseDraggingElement);\n                        // inform all listener that the element has accept the dragEnter event\n                        //\n                        if (this.currentDropTarget !== null) {\n                            this.currentDropTarget.onDragEnter(this.mouseDraggingElement); // legacy\n                            this.currentDropTarget.fireEvent(\"dragEnter\", { draggingElement: this.mouseDraggingElement });\n                        }\n                    }\n                }\n            }\n        }\n        catch (exc) {\n            console.log(exc);\n            debugger;\n        }\n    },\n\n\n    /**\n     * @method\n     *\n     * @param {draw2d.Figure} figure the shape below the mouse or null\n     * @param {Number} x the x-coordinate of the mouse down event\n     * @param {Number} y the y-coordinate of the mouse down event\n     * @param {Boolean} shiftKey true if the shift key has been pressed during this event\n     * @param {Boolean} ctrlKey true if the ctrl key has been pressed during the event\n     */\n    onMouseUp: function (canvas, x, y, shiftKey, ctrlKey) {\n        if (this.mouseDraggingElement !== null) {\n\n            var de = this.mouseDraggingElement;\n            var ct = this.currentTarget;\n            // start CommandStack transaction\n            canvas.getCommandStack().startTransaction();\n\n            de.onDragEnd(x, y, shiftKey, ctrlKey);\n            // notify all installed policies\n            //\n            if (ct) {\n                de.editPolicy.each(function (i, e) {\n                    if (e instanceof draw2d.policy.port.FlowPortsFeedbackPolicy) {\n                        e.onHoverLeave(canvas, de, ct);\n                    }\n                });\n            }\n\n            de.editPolicy.each(function (i, e) {\n                if (e instanceof draw2d.policy.port.FlowPortsFeedbackPolicy) {\n                    e.onDragEnd(canvas, de, x, y, shiftKey, ctrlKey);\n                }\n            });\n\n            // Reset the drag&drop flyover information\n            //\n            this.currentTarget = null;\n            de.isInDragDrop = false;\n\n            // fire an event\n            // @since 5.3.3\n            de.fireEvent(\"dragend\", { x: x, y: y, shiftKey: shiftKey, ctrlKey: ctrlKey });\n\n\n            // check if we drop the port onto a valid\n            // drop target and create a connection if possible\n            //\n            if (this.currentDropTarget !== null) {\n                this.mouseDraggingElement.onDrop(this.currentDropTarget, x, y, shiftKey, ctrlKey);\n\n                this.currentDropTarget.onDragLeave(this.mouseDraggingElement);\n                this.currentDropTarget.fireEvent(\"dragLeave\", { draggingElement: this.mouseDraggingElement });\n\n                // Ports accepts only Ports as DropTarget\n                //\n                if (this.currentDropTarget instanceof draw2d.Port) {\n                    var request = new draw2d.command.CommandType(draw2d.command.CommandType.CONNECT);\n                    request.source = this.currentDropTarget;\n                    request.target = this.mouseDraggingElement;\n                    var command = this.mouseDraggingElement.createCommand(request);\n\n                    if (command !== null) {\n                        command.setConnection(this.createConnection());\n                        canvas.getCommandStack().execute(command);\n                        this.currentDropTarget.onCatch(this.mouseDraggingElement, x, y, shiftKey, ctrlKey);\n                    }\n                }\n            }\n\n            // end command stack trans\n            canvas.getCommandStack().commitTransaction();\n            this.currentDropTarget = null;\n            this.mouseDraggingElement = null;\n        }\n    },\n\n\n    createConnection: function () {\n        var connection = this._super();\n        connection.setRouter(new draw2d.layout.connection.DirectRouter());\n\n        return connection;\n    }\n\n\n});",
        "import \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"Group\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#0899ba\",\n            color: \"#067A94\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n    /**\n    * @method\n    * Add an entity to the db shape\n    * \n    * @param {String} txt the label to show\n    * @param {Number} [optionalIndex] index where to insert the entity\n    */\n    addEntity: function (container, txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.setName(\"input_\" + label.id);\n        input.setColor(\"#04773b\");\n        input.setBackgroundColor(\"#04773b\");\n        input.setMaxFanOut(1);\n\n\n        var _table = this;\n\n        label.on(\"contextmenu\", function (emitter, event) {\n            $.contextMenu({\n                selector: 'body',\n                events:\n                {\n                    hide: function () { $.contextMenu('destroy'); }\n                },\n                callback: $.proxy(function (key, options) {\n                    switch (key) {\n                        case \"rename\":\n                            setTimeout(function () {\n                                emitter.onDoubleClick();\n                            }, 10);\n                            break;\n                        case \"new\":\n                            setTimeout(function () {\n                                _table.addEntity(container, \"_new_\").onDoubleClick();\n                                _table.onPortValueChanged();\n                            }, 10);\n                            break;\n                        case \"delete\":\n                            // with undo/redo support\n                            var cmd = new CommandRemoveRow(emitter);\n                            emitter.getCanvas().getCommandStack().execute(cmd);\n                            _table.onPortValueChanged();\n                        default:\n                            break;\n                    }\n\n                }, this),\n                x: event.x,\n                y: event.y,\n                items:\n                {\n                    \"rename\": { name: \"Rename\" },\n                    \"new\": { name: \"New Entity\" },\n                    \"sep1\": \"---------\",\n                    \"delete\": { name: \"Delete\" }\n                }\n            });\n        });\n\n\n\n\n        container.addRow(label);\n        this.updateCachedPort(input);\n\n\n        input.on(\"connect\", (element, event) => {\n            var connections = input.getConnections();\n            console.log(input);\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        console.log(this.getPorts());\n\n        return label;\n    },\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n        var labelKnowledge1 = new draw2d.shape.basic.Label({\n            text: \"Knowledge 1\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelKnowledge2 = new draw2d.shape.basic.Label({\n            text: \"Knowledge 2\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelTag = new LabelRight({\n            text: \"Group\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var input1 = labelKnowledge1.createPort(\"input\");\n        input1.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input1.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input1.setName(\"input_\" + labelKnowledge1.id);\n        input1.setColor(\"#04773b\");\n        input1.setBackgroundColor(\"#04773b\");\n        input1.setMaxFanOut(1);\n\n\n        var input2 = labelKnowledge2.createPort(\"input\");\n        input2.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input2.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input2.setName(\"input_\" + labelKnowledge2.id);\n        input2.setColor(\"#04773b\");\n        input2.setBackgroundColor(\"#04773b\");\n        input2.setMaxFanOut(1);\n\n        var output = labelTag.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelTag.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true,\n            padding: { top: 5 }\n        });\n\n        container.addRow(labelKnowledge1, labelTag);\n        //container.setCellAlign(0, 1, \"right\");\n        container.addRow(labelKnowledge2);\n\n\n        var _table = this;\n\n        labelKnowledge2.on(\"contextmenu\", function (emitter, event) {\n            $.contextMenu({\n                selector: 'body',\n                events:\n                {\n                    hide: function () { $.contextMenu('destroy'); }\n                },\n                callback: $.proxy(function (key, options) {\n                    switch (key) {\n                        case \"rename\":\n                            setTimeout(function () {\n                                emitter.onDoubleClick();\n                            }, 10);\n                            break;\n                        case \"new\":\n                            setTimeout(function () {\n                                _table.addEntity(container, \"_new_\").onDoubleClick();\n                                _table.onPortValueChanged();\n                            }, 10);\n                            break;\n                        default:\n                            break;\n                    }\n\n                }, this),\n                x: event.x,\n                y: event.y,\n                items:\n                {\n                    \"rename\": { name: \"Rename\" },\n                    \"new\": { name: \"New Entity\" }\n                }\n            });\n        });\n\n        this.add(container);\n\n\n        input1.on(\"connect\", (element, event) => {\n            var connections = input1.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        input2.on(\"connect\", (element, event) => {\n            var connections = input2.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        output.on(\"change:value\", (element, event) => {\n            var connections = output.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    },\n\n    getOutputPorts: function () {\n        var outport = this.getChildren().get(1).getChildren().get(1).getPorts().get(0);\n        //console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        return outport;\n    },\n\n    getInputPorts: function () {\n        var inports = new draw2d.util.ArrayList();\n        var inport1 = this.getChildren().get(1).getChildren().get(0).getPorts().get(0);\n        var inport2 = this.getChildren().get(1).getChildren().get(2).getPorts().get(0);\n        inports.add(inport1);\n        inports.add(inport2);\n        var size = this.getChildren().get(1).getChildren().getSize();\n        for (let i = 3; i < size; i++) {\n            inports.add(this.getChildren().get(1).getChildren().get(i).getPorts().get(0));\n        }\n\n        return inports\n    },\n    /**\n    * @method\n    * Called if the value of any port has been changed\n    *\n    * @param {draw2d.Port} relatedPort\n    * @template\n    */\n    onPortValueChanged: function (relatedPort) {\n        var data = [];\n        this.getInputPorts().each(function (i, port) {\n            data.push(port.getValue());\n        });\n\n        var temp = \"\";\n        for (let i = 0; i < data.length - 1; i++) {\n\n            temp = temp + data[i] + ', ';\n\n        }\n        temp = temp + data[data.length - 1];\n        //this.getOutputPorts().get(0).setValue('{' + data[1] + '}<sub>' + data[0] + '<sub>')\n\n        this.getOutputPorts().setValue(temp);\n        console.log(this.getOutputPorts().getValue());\n    }\n\n\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"hash\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#ea8c55\",\n            color: \"#bb7044\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n\n\n        var labelKnowledge = new draw2d.shape.basic.Label({\n            text: \"Knowledge\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelDigest = new LabelRight({\n            text: \"Digest\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n\n\n        var input1 = labelKnowledge.createPort(\"input\");\n        input1.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input1.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input1.setName(\"input_\" + labelKnowledge.id);\n        input1.setColor(\"#04773b\");\n        input1.setBackgroundColor(\"#04773b\");\n        input1.setMaxFanOut(1);\n\n\n        var output = labelDigest.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelDigest.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true,\n            padding: { top: 5 }\n        });\n\n        container.addRow(labelKnowledge, labelDigest);\n        //container.setCellAlign(0, 1, \"right\");\n\n\n        this.add(container);\n\n        input1.on(\"connect\", (element, event) => {\n            var connections = input1.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        output.on(\"change:value\", (element, event) => {\n            var connections = output.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    },\n    getOutputPorts: function () {\n        var outport= this.getChildren().get(1).getChildren().get(1).getPorts().get(0);\n        //console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        return outport;\n    },\n\n    getInputPorts: function () {\n        var inport= this.getChildren().get(1).getChildren().get(0).getPorts().get(0);\n        return inport\n    },\n    /**\n    * @method\n    * Called if the value of any port has been changed\n    *\n    * @param {draw2d.Port} relatedPort\n    * @template\n    */\n    onPortValueChanged: function (relatedPort) {\n        var data = this.getInputPorts().getValue();\n        //this.getOutputPorts().get(0).setValue('{' + data[1] + '}<sub>' + data[0] + '<sub>')\n        this.getOutputPorts().setValue('H(' + data + ')');\n        console.log(this.getOutputPorts().getValue());\n    }\n\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"idCertificate\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#006341\",\n            color:\"#004F34\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n\n        var labelIdCert = new LabelRight({\n            text: \"ID 1\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n\n\n        var output = labelIdCert.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelIdCert.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n\n\n\n\n\n        this.add(labelIdCert);\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    }\n\n});",
        "import \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.SetFigure.extend({\n\n    NAME: \"LabelRight\",\n\n    FONT_FALLBACK: {\n        'Georgia': 'Georgia, serif',\n        'Palatino Linotype': '\"Palatino Linotype\", \"Book Antiqua\", Palatino, serif',\n        'Times New Roman': '\"Times New Roman\", Times, serif',\n        'Arial': 'Arial, Helvetica, sans-serif',\n        'Arial Black': '\"Arial Black\", Gadget, sans-serif',\n        'Comic Sans MS': '\"Comic Sans MS\", cursive, sans-serif',\n        'Impact': 'Impact, Charcoal, sans-serif',\n        'Lucida Sans Unicode': '\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif',\n        'Tahoma, Geneva': 'Tahoma, Geneva, sans-seri',\n        'Trebuchet MS': '\"Trebuchet MS\", Helvetica, sans-serif',\n        'Verdana': 'Verdana, Geneva, sans-serif',\n        'Courier New': '\"Courier New\", Courier, monospace',\n        'Lucida Console': '\"Lucida Console\", Monaco, monospace'\n    },\n\n\n    /**\n     * @constructor\n     * Creates a new text element.\n     * \n     * @param {Object} [attr] the configuration of the shape\n     */\n    init: function (attr, setter, getter) {\n\n        this.text = \"\";\n        // for performance reasons\n        //\n        this.cachedWidth = null;\n        this.cachedHeight = null;\n        this.cachedMinWidth = null;\n        this.cachedMinHeight = null;\n\n        // appearance of the shape\n        //\n        this.fontSize = 12;\n        this.fontColor = new draw2d.util.Color(\"#080808\");\n        this.fontFamily = null;\n        this.padding = { top: 4, right: 4, bottom: 4, left: 4 };\n\n        this.outlineStroke = 0;\n        this.outlineColor = new draw2d.util.Color(null);\n\n        this.bold = false;\n\n        // behavior of the shape\n        //\n        this.editor = null;\n\n        this._super(\n            $.extend({ stroke: 1, width: 1, height: 1, resizeable: false }, attr),\n            $.extend({\n                /** @attr {String} text the text to show */\n                text: this.setText,\n                /** @attr {String} set the editor to use see {@link draw2d.ui.LabelEditor} */\n                editor: this.installEditor,\n                /** @attr {Number} outlineStroke the line width of the text to draw. Fill color and outline of the text can be different. */\n                outlineStroke: this.setOutlineStroke,\n                /** @attr {String|draw2d.util.Color} outlineColor the outline color of the text */\n                outlineColor: this.setOutlineColor,\n                /** @attr {String} fontFamily the font to use*/\n                fontFamily: this.setFontFamily,\n                /** @attr {Number} fontSize the font size to use */\n                fontSize: this.setFontSize,\n                /** @attr {String|draw2d.util.Color} fontColor the font color */\n                fontColor: this.setFontColor,\n                /** @attr {Number} padding the padding in pixel around the text */\n                padding: this.setPadding,\n                /** @attr {Boolean} bold indicator if bold text should be used*/\n                bold: this.setBold\n            }, setter),\n            $.extend({\n                text: this.getText,\n                outlineStroke: this.getOutlineStroke,\n                outlineColor: this.getOutlineColor,\n                fontFamily: this.getFontFamily,\n                fontSize: this.getFontSize,\n                fontColor: this.getFontColor,\n                padding: this.getPadding,\n                bold: this.isBold\n            }, getter));\n\n\n        this.installEditPolicy(new draw2d.policy.figure.AntSelectionFeedbackPolicy());\n\n\n        // some performance improvements\n        this.lastAppliedLabelRotation = \"\";\n        this.lastAppliedTextAttributes = {};\n    },\n\n    /** \n     * @method\n     * Creates the shape object for a text node.\n     * \n     * @template\n     **/\n    createSet: function () {\n        return this.canvas.paper.text(0, 0, this.text);\n    },\n\n    /**\n     * @method\n     * Set the canvas element of this figures.\n     * \n     * @param {draw2d.Canvas} canvas the new parent of the figure or null\n     */\n    setCanvas: function (canvas) {\n        this.clearCache();\n        this._super(canvas);\n        this.clearCache();\n    },\n\n    /**\n     * @method\n     * Trigger the repaint of the element and transport all style properties to the visual representation.<br>\n     * Called by the framework.\n     * \n     * @template\n     **/\n    repaint: function (attributes) {\n        if (this.repaintBlocked === true || this.shape === null || (this.parent && this.parent.repaintBlocked === true)) {\n            return;\n        }\n\n        // style the label\n        var lattr = this.calculateTextAttr();\n        lattr.text = this.text;\n\n        var attrDiff = draw2d.util.JSON.flatDiff(lattr, this.lastAppliedTextAttributes);\n        this.lastAppliedTextAttributes = lattr;\n\n        // the two \"attr\" calls takes 2/3 of the complete method call (chrome performance check).\n        // now we check if any changes happens and call this method only if neccessary.\n        if (!$.isEmptyObject(attrDiff)) {\n            this.svgNodes.attr(lattr);\n            // set of the x/y must be done AFTER the font-size and bold has been set.\n            // Reason: the getBBox method needs the font attributes for calculation\n\n            this.svgNodes.attr({\n                x: (this.stroke + (this.width - this.svgNodes.getBBox(true).width) - this.padding.right),\n                y: (this.svgNodes.getBBox(true).height / 2 + this.padding.top + this.getStroke())\n            });\n        }\n        this._super(attributes);\n    },\n\n\n    /**\n     * \n     * @private\n     */\n    calculateTextAttr: function () {\n        var lattr = {\n            \"text-anchor\": \"start\",\n            \"font-size\": this.fontSize,\n            \"font-weight\": (this.bold === true) ? \"bold\" : \"normal\",\n            fill: this.fontColor.hash(),\n            stroke: this.outlineColor.hash(),\n            \"stroke-width\": this.outlineStroke\n        };\n        if (this.fontFamily !== null) {\n            lattr[\"font-family\"] = this.fontFamily;\n        }\n        return lattr;\n    },\n\n    /**\n     * @private\n     */\n    applyTransformation: function () {\n        var ts = \"R\" + this.rotationAngle;\n        //    if(ts!==this.lastAppliedLabelRotation){\n        this.shape.transform(ts);\n        this.lastAppliedLabelRotation = ts;\n        //    }\n\n        this.svgNodes.transform(\n            \"R\" + this.rotationAngle +\n            \"T\" + this.getAbsoluteX() + \",\" + this.getAbsoluteY());\n\n        return this;\n    },\n\n\n    /**\n     * @method\n     * Set the new font size in [pt].\n     *\n     * @param {Number} size The new font size in <code>pt</code>\n     **/\n    setFontSize: function (size) {\n        this.clearCache();\n        this.fontSize = size;\n\n        this.repaint();\n\n        this.fireEvent(\"change:fontSize\", { value: this.fontSize });\n        this.fireEvent(\"resize\");\n\n        // Update the resize handles if the user change the position of the element via an API call.\n        //\n        var _this = this;\n        this.editPolicy.each(function (i, e) {\n            if (e instanceof draw2d.policy.figure.DragDropEditPolicy) {\n                e.moved(_this.canvas, _this);\n            }\n        });\n\n\n        return this;\n    },\n\n    /**\n     * @method\n     * Return the current used font size in px.\n     * \n     * @returns {Number}\n     * @since 4.0.1\n     */\n    getFontSize: function () {\n        return this.fontSize;\n    },\n\n\n    /**\n     * @method\n     * Set the label to <b>bold</b> or <b>normal</b> font weight.\n     *\n     * @param {Boolean} bold The bold flag for the label\n     * @since 2.4.1\n     **/\n    setBold: function (bold) {\n        this.clearCache();\n        this.bold = bold;\n        this.repaint();\n\n        this.fireEvent(\"change:bold\", { value: this.bold });\n        this.fireEvent(\"resize\");\n\n        // Update the resize handles if the user change the position of the element via an API call.\n        //\n        var _this = this;\n        this.editPolicy.each(function (i, e) {\n            if (e instanceof draw2d.policy.figure.DragDropEditPolicy) {\n                e.moved(_this.canvas, _this);\n            }\n        });\n\n        return this;\n    },\n\n    /**\n     * @method\n     * Return the \"bold\" attribute of the label\n     * \n     * @since 5.0.0\n     * @returns {Boolean}\n     */\n    isBold: function () {\n        return this.bold;\n    },\n\n    /**\n     * @method\n     * Set the outline color of the font.\n     * \n     * @param {draw2d.util.Color/String} color The new color of the line.\n     * @since 4.2.1\n     **/\n    setOutlineColor: function (color) {\n        this.outlineColor = new draw2d.util.Color(color);\n        this.repaint();\n        this.fireEvent(\"change:outlineColor\", { value: this.outlineColor });\n\n        return this;\n    },\n\n    /**\n     * @method\n     * The outlien color of the text\n     * \n     * @returns {draw2d.util.Color}\n     * @since 4.2.1\n     */\n    getOutlineColor: function () {\n        return this.outlineColor;\n    },\n\n    /**\n     * @method\n     * Set the stroke of the text to use.\n     * \n     * @param {Number} w The new line width of the figure\n     * @since 4.2.1\n     **/\n    setOutlineStroke: function (w) {\n        this.outlineStroke = w;\n        this.repaint();\n        this.fireEvent(\"change:outlineStroke\", { value: this.outlineStroke });\n\n        return this;\n    },\n\n    /**\n     * @method\n     * The used outline line width.\n     * \n     * @type {Number}\n     * @since 4.2.1\n     **/\n    getOutlineStroke: function () {\n        return this.outlineStroke;\n    },\n\n    /**\n     * @method\n     * Set the color of the font.\n     * \n     * @param {draw2d.util.Color/String} color The new color of the line.\n     **/\n    setFontColor: function (color) {\n        this.fontColor = new draw2d.util.Color(color);\n        this.repaint();\n        this.fireEvent(\"change:fontColor\", { value: this.fontColor });\n\n        return this;\n    },\n\n    /**\n     * @method\n     * The current used font color\n     * \n     * @returns {draw2d.util.Color}\n     */\n    getFontColor: function () {\n        return this.fontColor;\n    },\n\n    /**\n     * @method\n     * Set the padding of the element\n     * \n     *      // Alternatively you can use the attr method:\n     *      //\n     *      // set the padding for top,left,bottom,right in one call \n     *      figure.attr({\n     *        padding: 3\n     *      });\n     *      \n     *      // update the padding left and top\n     *      figure.attr({\n     *        padding: {left:3, top:30}\n     *      });\n     * \n     * @param {Number|Object} padding The new padding\n     **/\n    setPadding: function (padding) {\n        this.clearCache();\n        if (typeof padding === \"number\") {\n            this.padding = { top: padding, right: padding, bottom: padding, left: padding };\n        }\n        else {\n            $.extend(this.padding, padding);\n        }\n        this.repaint();\n        this.fireEvent(\"change:padding\", { value: this.padding });\n\n        return this;\n    },\n\n\n    /**\n     * @method\n     * Get the padding of the element.\n     *\n     * @since 4.0.1\n     **/\n    getPadding: function () {\n        return this.padding;\n    },\n\n    /**\n     * @method\n     * Set the font family to use. If you use the shown font names the typical fallback \n     * font are installed as well.\n     * \n     * <b>Serif Fonts</b>\n     * <ul>\n     *  <li><span style=\"font-family:'Georgia'\">Georgia</span></li>\n     *  <li><span style=\"font-family:'Palatino Linotype'\">Palatino Linotype</span></li>\n     *  <li><span style=\"font-family:'Times New Roman'\">Times New Roman</span></li>   \n     * </ul>\n     * \n     * <b>Sans-Serif Fonts</b>\n     * <ul>\n     *  <li><span style=\"font-family:'Arial'\">Arial</span></li> \n     *  <li><span style=\"font-family:'Arial Black'\">Arial Black</span></li>  \n     *  <li><span style=\"font-family:'Comic Sans MS'\">Comic Sans MS</span></li> \n     *  <li><span style=\"font-family:'Impact, Charcoal'\">Impact, Charcoal</span></li> \n     *  <li><span style=\"font-family:'Lucida Sans Unicode'\">Lucida Sans Unicode</span></li> \n     *  <li><span style=\"font-family:'Tahoma, Geneva'\">Tahoma, Geneva</span></li>\n     *  <li><span style=\"font-family:'Trebuchet MS'\">Trebuchet MS</span> </li>  \n     *  <li><span style=\"font-family:'Verdana'\">Verdana</span></li>  \n     * </ul>\n     * \n     * <b>Monospace Fonts</b>\n     * <ul>\n     *  <li><span style=\"font-family:'Courier New'\">Courier New</span></li>\n     *  <li><span style=\"font-family:'Lucida Console'\">Lucida Console</span></li>\n     * </ul>\n     *\n     * @param {String} font The font to use\n     **/\n    setFontFamily: function (font) {\n        this.clearCache();\n\n        // check for fallback\n        //\n        if ((typeof font !== \"undefined\") && font !== null && typeof this.FONT_FALLBACK[font] !== \"undefined\") {\n            font = this.FONT_FALLBACK[font];\n        }\n\n        this.fontFamily = font;\n        this.repaint();\n        this.fireEvent(\"change:fontFamily\", { value: this.fontFamily });\n\n        return this;\n    },\n\n\n    /**\n     * @method\n     * Returns the used font family of the label.\n     * \n     * @returns {String}\n     */\n    getFontFamily: function () {\n        return this.fontFamily;\n    },\n\n\n    /**\n     * @method\n     * A Label did have \"autosize\". Do nothing at all.\n     *\n     **/\n    setDimension: function (w, h) {\n        this.clearCache();\n\n        this._super(w, h);\n\n        return this;\n    },\n\n    /**\n     * @method\n     * clear the internal cache for width/height precalculation\n     * @private\n     */\n    clearCache: function () {\n        this.portRelayoutRequired = true;\n        this.cachedMinWidth = null;\n        this.cachedMinHeight = null;\n        this.cachedWidth = null;\n        this.cachedHeight = null;\n        this.lastAppliedTextAttributes = {};\n\n        return this;\n    },\n\n    /**\n     * @method\n     * This value is relevant for the interactive resize of the figure.\n     *\n     * @return {Number} Returns the min. width of this object.\n     */\n    getMinWidth: function () {\n        if (this.shape === null) {\n            return 0;\n        }\n\n        if (this.cachedMinWidth === null) {\n            this.cachedMinWidth = this.svgNodes.getBBox(true).width\n                + this.padding.left\n                + this.padding.right\n                + 2 * this.getStroke();\n        }\n\n        return this.cachedMinWidth;\n    },\n\n    /**\n     * @method\n     * This value is relevant for the interactive resize of the figure.\n     *\n     * @return {Number} Returns the min. width of this object.\n     */\n    getMinHeight: function () {\n        if (this.shape === null) {\n            return 0;\n        }\n\n        if (this.cachedMinHeight === null) {\n            this.cachedMinHeight = this.svgNodes.getBBox(true).height\n                + this.padding.top\n                + this.padding.bottom\n                + (2 * this.getStroke());\n        }\n\n        return this.cachedMinHeight;\n    },\n\n    /**\n     * @method\n     * Return the calculate width of the set. This calculates the bounding box of all elements.\n     *\n     * @return {Number} the calculated width of the label\n     **/\n    getWidth: function () {\n        if (this.shape === null) {\n            return 0;\n        }\n\n        if (this.cachedWidth === null) {\n            if (this.resizeable === true) {\n                this.cachedWidth = Math.max(this.width, this.getMinWidth());\n            }\n            else {\n                this.cachedWidth = this.getMinWidth();\n            }\n        }\n\n\n        return this.cachedWidth;\n    },\n\n    /**\n     * @method\n     * Return the calculated height of the set. This calculates the bounding box of all elements.\n     *\n     * @return {Number} the calculated height of the label\n     */\n    getHeight: function () {\n        if (this.shape === null) {\n            return 0;\n        }\n\n        if (this.cachedHeight === null) {\n            this.cachedHeight = Math.max(this.height, this.getMinHeight());\n        }\n\n        return this.cachedHeight;\n    },\n\n    /**\n     * @method\n     * Set an editor for the label. This can be a dialog or inplace editor for the \n     * Text.<br>\n     * The editor will be activated if you doubleClick on the label.\n     * \n     * @param {draw2d.ui.LabelEditor|String} editor\n     */\n    installEditor: function (editor) {\n        if (typeof editor === \"string\") {\n            editor = eval(\"new \" + editor + \"()\");\n        }\n        this.editor = editor;\n\n        return this;\n    },\n\n    /**\n     * @method\n     * Called when a user dbl clicks on the element\n     * \n     */\n    onDoubleClick: function () {\n        if (this.editor !== null) {\n            this.editor.start(this);\n        }\n    },\n\n\n    /**\n     * @method\n     * Returns the current text of the label.\n     *\n     * @returns the current display text of the label\n     * @type String\n     **/\n    getText: function () {\n        return this.text;\n    },\n\n    /**\n     * @method\n     * Set the text for the label. Use \\n for multiline text.\n     * \n     * @param {String} text The new text for the label.\n     **/\n    setText: function (text) {\n        this.clearCache();\n        this.text = text;\n\n        this.repaint();\n        // Update the resize handles if the user change the position of the element via an API call.\n        //\n        var _this = this;\n        this.editPolicy.each(function (i, e) {\n            if (e instanceof draw2d.policy.figure.DragDropEditPolicy) {\n                e.moved(_this.canvas, _this);\n            }\n        });\n\n        this.fireEvent(\"resize\");\n        this.fireEvent(\"change:text\", { value: this.text });\n\n        if (this.parent !== null) {\n            this.parent.repaint();\n        }\n\n        return this;\n    },\n\n\n    hitTest: function (x, y) {\n        // apply a simple bounding box test if the label isn'T rotated\n        //\n        if (this.rotationAngle === 0) {\n            return this._super(x, y);\n        }\n\n        // rotate the box with the current matrix of the\n        // shape\n        var matrix = this.shape.matrix;\n        var points = this.getBoundingBox().getVertices();\n        points.each(function (i, point) {\n            var x = matrix.x(point.x, point.y);\n            var y = matrix.y(point.x, point.y);\n            point.x = x;\n            point.y = y;\n        });\n\n        var polySides = 4;\n        var i = 0;\n        var j = polySides - 1;\n        var oddNodes = false;\n\n        for (i = 0; i < polySides; i++) {\n            var pi = points.get(i);\n            var pj = points.get(j);\n            if ((pi.y < y && pj.y >= y\n                || pj.y < y && pi.y >= y)\n                && (pi.x <= x || pj.x <= x)) {\n                if (pi.x + (y - pi.y) / (pj.y - pi.y) * (pj.x - pi.x) < x) {\n                    oddNodes = !oddNodes;\n                }\n            }\n            j = i;\n        }\n        return oddNodes;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.text = this.text;\n        memento.outlineStroke = this.outlineStroke;\n        memento.outlineColor = this.outlineColor.hash();\n        memento.fontSize = this.fontSize;\n        memento.fontColor = this.fontColor.hash();\n        memento.fontFamily = this.fontFamily;\n\n        if (this.editor !== null) {\n            memento.editor = this.editor.NAME;\n        }\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     * \n     * @param {Object} memento\n     * @returns \n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n        if (typeof memento.text !== \"undefined\") {\n            this.setText(memento.text);\n        }\n        if (typeof memento.outlineStroke !== \"undefined\") {\n            this.setOutlineStroke(memento.outlineStroke);\n        }\n        if (typeof memento.outlineColor !== \"undefined\") {\n            this.setOutlineColor(memento.outlineColor);\n        }\n        if (typeof memento.fontFamily !== \"undefined\") {\n            this.setFontFamily(memento.fontFamily);\n        }\n        if (typeof memento.fontSize !== \"undefined\") {\n            this.setFontSize(memento.fontSize);\n        }\n        if (typeof memento.fontColor !== \"undefined\") {\n            this.setFontColor(memento.fontColor);\n        }\n\n        if (typeof memento.editor === \"string\") {\n            this.installEditor(eval(\"new \" + memento.editor + \"()\"));\n        }\n    }\n\n});\n",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"mac\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#c75146\",\n            color: \"#9F4038\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n        var labelKey = new draw2d.shape.basic.Label({\n            text: \"Symmetric Key\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelKnowledge = new draw2d.shape.basic.Label({\n            text: \"Knowledge\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelTag = new LabelRight({\n            text: \"Tag\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var input1 = labelKey.createPort(\"input\");\n        input1.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input1.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input1.setSemanticGroup(\"symmetrickey\");\n        input1.setName(\"input_\" + labelKey.id);\n        input1.setColor(\"#00C389\");\n        input1.setBackgroundColor(\"#00C389\");\n        input1.setMaxFanOut(1);\n\n        var input2 = labelKnowledge.createPort(\"input\");\n        input2.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input2.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input2.setName(\"input_\" + labelKnowledge.id);\n        input2.setColor(\"#04773b\");\n        input2.setBackgroundColor(\"#04773b\");\n        input2.setMaxFanOut(1);\n\n\n        var output = labelTag.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelTag.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true,\n            padding: { top: 5 }\n        });\n\n        container.addRow(labelKey, labelTag);\n        //container.setCellAlign(0, 1, \"right\");\n        container.addRow(labelKnowledge);\n\n        this.add(container);\n\n        input2.on(\"connect\", (element, event) => {\n            var connections = input2.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n        input1.on(\"connect\", (element, event) => {\n            var connections = input1.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        output.on(\"change:value\", (element, event) => {\n            var connections = output.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    },\n\n    getOutputPorts: function () {\n        var outport= this.getChildren().get(1).getChildren().get(1).getPorts().get(0);\n        //console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        return outport;\n    },\n\n    getInputPorts: function () {\n        var inports=new draw2d.util.ArrayList( );\n        var inport1= this.getChildren().get(1).getChildren().get(0).getPorts().get(0);\n        var inport2= this.getChildren().get(1).getChildren().get(2).getPorts().get(0);\n        console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        inports.add(inport1);\n        inports.add(inport2);\n        return inports\n    },\n    /**\n    * @method\n    * Called if the value of any port has been changed\n    *\n    * @param {draw2d.Port} relatedPort\n    * @template\n    */\n    onPortValueChanged: function (relatedPort) {\n        var data = [];\n        this.getInputPorts().each(function (i, port) {\n            data.push(port.getValue());\n        });\n        //this.getOutputPorts().get(0).setValue('{' + data[1] + '}<sub>' + data[0] + '<sub>')\n        this.getOutputPorts().setValue('M<sub>' + data[0] + '</sub>(' + data[1] + ')');\n        console.log(this.getOutputPorts().getValue());\n    }\n\n\n});",
        "\nimport \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\nimport { Tweenable } from \"shifty\";\n\nexport default draw2d.policy.port.PortFeedbackPolicy.extend({\n\n    NAME: \"FlowPortsFeedbackPolicy\",\n\n    /**\n     * @constructor \n     */\n    init: function (attr, setter, getter) {\n        this._super(attr, setter, getter);\n        this.connectionLine = null;\n        this.tweenable = null;\n    },\n\n    /**\n     * @method\n     * Called by the framework if the related shape has init a drag&drop\n     * operation\n     * \n     * @param {draw2d.Canvas} canvas The host canvas\n     * @param {draw2d.Figure} figure The related figure\n     * @param {Number} x the x-coordinate of the mouse up event\n     * @param {Number} y the y-coordinate of the mouse up event\n     * @param {Boolean} shiftKey true if the shift key has been pressed during this event\n     * @param {Boolean} ctrlKey true if the ctrl key has been pressed during the event\n     */\n    onDragStart: function (canvas, figure, x, y, shiftKey, ctrlKey) {\n        var start = 0;\n        var allPorts = canvas.getAllPorts().clone();\n        allPorts.each(function (i, element) {\n            if (typeof element.__beforeInflate === \"undefined\") {\n                element.__beforeInflate = element.getWidth();\n            }\n            start = element.__beforeInflate;\n        });\n\n\n        // animate the resize of the ports\n        //\n\n        allPorts.grep(function (p) {\n            //console.log(p.parent.getText() + \" \" + figure.parent.getText() + \" \" + p.parent.parent.parent.NAME + \" \" + figure.parent.parent.parent.NAME + \" \" + (p.NAME != figure.NAME && p.parent.parent.parent !== figure.parent.parent.parent));\n            return (p.parent.NAME != figure.parent.NAME && p.parent.parent.parent !== figure.parent.parent.parent) || (p instanceof draw2d.HybridPort) || (figure instanceof draw2d.HybridPort);\n        });\n\n        this.tweenable = new Tweenable();\n        this.tweenable.tween({\n            from: { 'size': start / 2 },\n            to: { 'size': start },\n            duration: 200,\n            easing: \"easeOutSine\",\n            step: function (params) {\n                allPorts.each(function (i, element) {\n                    // IMPORTANT shortcut to avoid rendering errors!!\n                    // performance shortcut to avoid a lot of events and recalculate/routing of all related connections\n                    // for each setDimension call. Additional the connection is following a port during Drag&Drop operation\n                    element.shape.attr({ rx: params.size, ry: params.size });\n                    element.width = element.height = params.size * 2;\n                    //element.setDimension(params.size, params.size);\n                });\n            }\n        });\n\n        this.connectionLine = new draw2d.shape.basic.Line();\n        this.connectionLine.setCanvas(canvas);\n        this.connectionLine.getShapeElement();\n        this.connectionLine.setDashArray(\"- \");\n        this.connectionLine.setColor(\"#30c48a\");\n\n        this.onDrag(canvas, figure);\n\n        return true;\n    },\n\n\n    /**\n     * @method\n     * Called by the framework during drag a figure.\n     * \n     * @param {draw2d.Canvas} canvas The host canvas\n     * @param {draw2d.Figure} figure The related figure\n     * @template\n     */\n    onDrag: function (canvas, figure) {\n        var x1 = figure.ox + figure.getParent().getAbsoluteX();\n        var y1 = figure.oy + figure.getParent().getAbsoluteY();\n\n        this.connectionLine.setStartPoint(x1, y1);\n        this.connectionLine.setEndPoint(figure.getAbsoluteX(), figure.getAbsoluteY());\n    },\n\n    /**\n     * @method\n     * Called by the framework if the drag drop operation ends.\n     * \n     * @param {draw2d.Canvas} canvas The host canvas\n     * @param {draw2d.Figure} figure The related figure\n     * @template\n     */\n    onDragEnd: function (canvas, figure, x, y, shiftKey, ctrlKey) {\n        if (this.tweenable) {\n            this.tweenable.stop(true);\n            this.tweenable.dispose();\n            this.tweenable = null;\n        }\n        canvas.getAllPorts().each(function (i, element) {\n            // IMPORTANT shortcut to avoid rendering errors!!\n            // performance shortcut to avoid a lot of events and recalculate/routing of all related connections\n            // for each setDimension call. Additional the connection is following a port during Drag&Drop operation\n            element.shape.attr({ rx: element.__beforeInflate / 2, ry: element.__beforeInflate / 2 });\n            element.width = element.height = element.__beforeInflate;\n            delete element.__beforeInflate;\n            //element.setDimension(element.__beforeInflate, element.__beforeInflate);\n        });\n        this.connectionLine.setCanvas(null);\n        this.connectionLine = null;\n    },\n\n    onHoverEnter: function (canvas, draggedFigure, hoverFiger) {\n        this.connectionLine.setGlow(true);\n        hoverFiger.setGlow(true);\n    },\n\n    onHoverLeave: function (canvas, draggedFigure, hoverFiger) {\n        hoverFiger.setGlow(false);\n        if (this.connectionLine === null) {\n            debugger;\n        }\n        this.connectionLine.setGlow(false);\n    }\n\n\n});",
        "import \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\nimport CommandDelete from './CommandDelete.js';\nimport FlowPortsFeedbackPolicy from \"./FlowPortsFeedbackPolicy.js\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"Message\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3 }, attr));\n\n        this.parser = null;\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#16679a\",\n            color: \"#11527B\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n    },\n\n\n\n    /**\n    * @method\n    * Add an entity to the db shape\n    * \n    * @param {String} txt the label to show\n    * @param {Number} [optionalIndex] index where to insert the entity\n    */\n    addEntity: function (container, txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new FlowPortsFeedbackPolicy());\n        input.setName(\"input_\" + label.id);\n        input.setColor(\"#04773b\");\n        input.setBackgroundColor(\"#04773b\");\n        input.setMaxFanOut(1);\n\n\n        var _table = this;\n\n        label.on(\"contextmenu\", function (emitter, event) {\n            $.contextMenu({\n                selector: 'body',\n                events:\n                {\n                    hide: function () { $.contextMenu('destroy'); }\n                },\n                callback: $.proxy(function (key, options) {\n                    switch (key) {\n                        case \"rename\":\n                            setTimeout(function () {\n                                emitter.onDoubleClick();\n                            }, 10);\n                            break;\n                        case \"new\":\n                            setTimeout(function () {\n                                _table.addEntity(container, \"_new_\").onDoubleClick();\n                                _table.onPortValueChanged();\n                            }, 10);\n                            break;\n                        case \"delete\":\n                            // with undo/redo support\n                            var cmd = new CommandDelete(emitter);\n                            emitter.getCanvas().getCommandStack().execute(cmd);\n                            _table.onPortValueChanged();\n                        default:\n                            break;\n                    }\n\n                }, this),\n                x: event.x,\n                y: event.y,\n                items:\n                {\n                    \"rename\": { name: \"Rename\" },\n                    \"new\": { name: \"New Entity\" },\n                    \"sep1\": \"---------\",\n                    \"delete\": { name: \"Delete\" }\n                }\n            });\n        });\n\n\n        container.addRow(label);\n        this.updateCachedPort(input);\n\n\n        input.on(\"connect\", (element, event) => {\n            var connections = input.getConnections();\n            console.log(input);\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n        return label;\n    },\n    /**\n    * @method\n    * Add an entity to the db shape\n    * \n    * @param {String} txt the label to show\n    * @param {Number} [optionalIndex] index where to insert the entity\n    */\n    addInOut: function (parser) {\n        this.parser = parser;\n\n        var label = new draw2d.shape.basic.Label({\n            text: \"Field 1\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n        var label1 = new draw2d.shape.basic.Label({\n            text: \"Field 2\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new FlowPortsFeedbackPolicy());\n        input.setName(\"input_\" + label.id);\n        input.setColor(\"#04773b\");\n        input.setBackgroundColor(\"#04773b\");\n        input.setMaxFanOut(1);\n\n        var input1 = label1.createPort(\"input\");\n        input1.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input1.installEditPolicy(new FlowPortsFeedbackPolicy());\n        input1.setName(\"input_\" + label1.id);\n        input1.setColor(\"#04773b\");\n        input1.setBackgroundColor(\"#04773b\");\n        input1.setMaxFanOut(1);\n\n        var _table = this;\n        label1.on(\"contextmenu\", function (emitter, event) {\n            $.contextMenu({\n                selector: 'body',\n                events:\n                {\n                    hide: function () { $.contextMenu('destroy'); }\n                },\n                callback: $.proxy(function (key, options) {\n                    switch (key) {\n                        case \"rename\":\n                            setTimeout(function () {\n                                emitter.onDoubleClick();\n                            }, 10);\n                            break;\n                        case \"new\":\n                            setTimeout(function () {\n                                _table.addEntity(container, \"_new_\").onDoubleClick();\n                                _table.onPortValueChanged();\n                            }, 10);\n                            break;\n                        case \"delete\":\n                            // with undo/redo support\n                            //var layout = emitter.getParent();\n                            var cmd = new CommandDelete(emitter);\n                            emitter.getCanvas().getCommandStack().execute(cmd);\n                            _table.onPortValueChanged();\n                        default:\n                            break;\n                    }\n\n                }, this),\n                x: event.x,\n                y: event.y,\n                items:\n                {\n                    \"rename\": { name: \"Rename\" },\n                    \"new\": { name: \"New Entity\" },\n                    \"sep1\": \"---------\",\n                    \"delete\": { name: \"Delete\" }\n                }\n            });\n        });\n\n        label.on(\"contextmenu\", function (emitter, event) {\n            $.contextMenu({\n                selector: 'body',\n                events:\n                {\n                    hide: function () { $.contextMenu('destroy'); }\n                },\n                callback: $.proxy(function (key, options) {\n                    switch (key) {\n                        case \"rename\":\n                            setTimeout(function () {\n                                emitter.onDoubleClick();\n                            }, 10);\n                            break;\n                        case \"new\":\n                            setTimeout(function () {\n                                _table.addEntity(container, \"_new_\").onDoubleClick();\n                                _table.onPortValueChanged();\n                            }, 10);\n                            break;\n                        default:\n                            break;\n                    }\n\n                }, this),\n                x: event.x,\n                y: event.y,\n                items:\n                {\n                    \"rename\": { name: \"Rename\" },\n                    \"new\": { name: \"New Entity\" }\n                }\n            });\n        });\n\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true,\n            padding: { top: 5 }\n        });\n\n        container.addRow(label);\n        container.addRow(label1);\n        this.add(container);\n\n        input.on(\"connect\", (element, event) => {\n            var connections = input.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        input1.on(\"connect\", (element, event) => {\n            var connections = input1.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n\n        if (typeof memento.entities !== \"undefined\") {\n            $.each(memento.entities, $.proxy(function (i, e) {\n                var entity = this.addEntity(e.text);\n                entity.id = e.id;\n                entity.getInputPort(0).setName(\"input_\" + e.id);\n                entity.getOutputPort(0).setName(\"output_\" + e.id);\n            }, this));\n        }\n\n        return this;\n    },\n\n\n\n    getInputPorts: function () {\n        var inports = new draw2d.util.ArrayList();\n        var inport1 = this.getChildren().get(1).getChildren().get(0).getPorts().get(0);\n        inports.add(inport1);\n        var size = this.getChildren().get(1).getChildren().getSize();\n        for (let i = 1; i < size; i++) {\n            inports.add(this.getChildren().get(1).getChildren().get(i).getPorts().get(0));\n        }\n\n        return inports\n    },\n    /**\n    * @method\n    * Called if the value of any port has been changed\n    *\n    * @param {draw2d.Port} relatedPort\n    * @template\n    */\n    onPortValueChanged: function (relatedPort) {\n        var data = [];\n        this.getInputPorts().each(function (i, port) {\n            data.push(port.getValue());\n        });\n\n        var temp = \"\";\n        for (let i = 0; i < data.length - 1; i++) {\n\n            temp = temp + data[i] + ', ';\n\n        }\n        temp = temp + data[data.length - 1];\n        //this.getOutputPorts().get(0).setValue('{' + data[1] + '}<sub>' + data[0] + '<sub>')\n\n\n        this.parser.setMessage(temp);\n    }\n\n});",
        "import \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"nonce\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n        this.nonce=JSON.parse(sessionStorage.getItem(\"nonce\"));\n        //console.log(this.nonce);\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#154734\",\n            color: \"#103829\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n\n\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n\n        for (let i = 0; i < this.nonce.length; i++) { \n            var labelNonce = new LabelRight({\n                text: this.nonce[i],\n                stroke: 0,\n                radius: 0,\n                bgColor: null,\n                padding: { left: 10, top: 3, right: 10, bottom: 5 },\n                fontColor: \"#4a4a4a\",\n                resizeable: true,\n                editor: new draw2d.ui.LabelEditor()\n            });\n\n\n\n            var output = labelNonce.createPort(\"output\");\n            output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n            output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n            output.setName(\"output_\" + labelNonce.id);\n            output.setColor(\"#04773b\");\n            output.setBackgroundColor(\"#04773b\");\n            output.setValue(this.nonce[i]);\n\n            this.add(labelNonce);\n\n        }\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    },\n       \n  \n\n});",
        "\n\n\nexport default Class.extend({\n\n    NAME: \"Parser\",\n\n    init: function () {\n\n    },\n\n    setMessage: function (message) {\n        document.getElementById(\"toolbar_message_preview\").innerHTML = message;\n    }\n});",
        "import \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"signature\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#ad2e24\",\n            color: \"#8A241C\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n        var labelKey = new draw2d.shape.basic.Label({\n            text: \"Private Key\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelKnowledge = new draw2d.shape.basic.Label({\n            text: \"Knowledge\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelCiphertext = new LabelRight({\n            text: \"signature\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var input1 = labelKey.createPort(\"input\");\n        input1.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input1.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input1.setSemanticGroup(\"asymprivkey\");\n        input1.setName(\"input_\" + labelKey.id);\n        input1.setColor(\"#7AE1BF\");\n        input1.setBackgroundColor(\"#7AE1BF\");\n        input1.setMaxFanOut(1);\n\n        var input2 = labelKnowledge.createPort(\"input\");\n        input2.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input2.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input2.setName(\"input_\" + labelKnowledge.id);\n        input2.setColor(\"#04773b\");\n        input2.setBackgroundColor(\"#04773b\");\n        input2.setMaxFanOut(1);\n\n        var output = labelCiphertext.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelCiphertext.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true,\n            padding: { top: 5 }\n        });\n\n        container.addRow(labelKey, labelCiphertext);\n        //container.setCellAlign(0, 1, \"right\");\n        container.addRow(labelKnowledge);\n\n        this.add(container);\n\n        input2.on(\"connect\", (element, event) => {\n            var connections = input2.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n        input1.on(\"connect\", (element, event) => {\n            var connections = input1.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        output.on(\"change:value\", (element, event) => {\n            var connections = output.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    },\n\n    getOutputPorts: function () {\n        var outport= this.getChildren().get(1).getChildren().get(1).getPorts().get(0);\n        //console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        return outport;\n    },\n\n    getInputPorts: function () {\n        var inports=new draw2d.util.ArrayList( );\n        var inport1= this.getChildren().get(1).getChildren().get(0).getPorts().get(0);\n        var inport2= this.getChildren().get(1).getChildren().get(2).getPorts().get(0);\n        console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        inports.add(inport1);\n        inports.add(inport2);\n        return inports\n    },\n    /**\n    * @method\n    * Called if the value of any port has been changed\n    *\n    * @param {draw2d.Port} relatedPort\n    * @template\n    */\n    onPortValueChanged: function (relatedPort) {\n        var data = [];\n        this.getInputPorts().each(function (i, port) {\n            data.push(port.getValue());\n        });\n        //this.getOutputPorts().get(0).setValue('{' + data[1] + '}<sub>' + data[0] + '<sub>')\n        this.getOutputPorts().setValue('{' + data[1] + '}<sub>' + data[0] + '<sup>-1</sup></sub>');\n        console.log(this.getOutputPorts().getValue());\n    }\n\n});",
        "import \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"symmetricEncryption\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#81171b\",\n            color: \"#671215\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n        var labelKey = new draw2d.shape.basic.Label({\n            text: \"Symmetric Key\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelKnowledge = new draw2d.shape.basic.Label({\n            text: \"Knowledge\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var labelCiphertext = new LabelRight({\n            text: \"Ciphertext\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        var input1 = labelKey.createPort(\"input\");\n        input1.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input1.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input1.setSemanticGroup(\"symmetrickey\");\n        input1.setName(\"input_\" + labelKey.id);\n        input1.setColor(\"#00C389\");\n        input1.setBackgroundColor(\"#00C389\");\n        input1.setMaxFanOut(1);\n\n\n        var input2 = labelKnowledge.createPort(\"input\");\n        input2.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input2.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        input2.setName(\"input_\" + labelKnowledge.id);\n        input2.setColor(\"#04773b\");\n        input2.setBackgroundColor(\"#04773b\");\n        input2.setMaxFanOut(1);\n\n        var output = labelCiphertext.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setName(\"output_\" + labelCiphertext.id);\n        output.setColor(\"#04773b\");\n        output.setBackgroundColor(\"#04773b\");\n\n\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true,\n            padding: { top: 5 }\n        });\n\n        container.addRow(labelKey, labelCiphertext);\n        //container.setCellAlign(0, 1, \"right\");\n        container.addRow(labelKnowledge);\n\n        this.add(container);\n\n\n        input2.on(\"connect\", (element, event) => {\n            var connections = input2.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n\n        input1.on(\"connect\", (element, event) => {\n            var connections = input1.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        output.on(\"change:value\", (element, event) => {\n            var connections = output.getConnections();\n            connections.each((i, conn) => {\n                var targetPort = conn.getTarget();\n                targetPort.setValue(conn.getSource().getValue());\n            });\n        });\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    },\n\n    getOutputPorts: function () {\n        var outport= this.getChildren().get(1).getChildren().get(1).getPorts().get(0);\n        //console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        return outport;\n    },\n\n    getInputPorts: function () {\n        var inports=new draw2d.util.ArrayList( );\n        var inport1= this.getChildren().get(1).getChildren().get(0).getPorts().get(0);\n        var inport2= this.getChildren().get(1).getChildren().get(2).getPorts().get(0);\n        console.log(this.getChildren().get(1).getChildren().get(1).getPorts().get(0));\n        inports.add(inport1);\n        inports.add(inport2);\n        return inports\n    },\n    /**\n    * @method\n    * Called if the value of any port has been changed\n    *\n    * @param {draw2d.Port} relatedPort\n    * @template\n    */\n     onPortValueChanged: function (relatedPort) {\n        var data = [];\n        this.getInputPorts().each(function (i, port) {\n            data.push(port.getValue());\n        });\n        //this.getOutputPorts().get(0).setValue('{' + data[1] + '}<sub>' + data[0] + '<sub>')\n        this.getOutputPorts().setValue('{' + data[1] + '}<sub>' + data[0] + '</sub>');\n        console.log(this.getOutputPorts().getValue());\n    }\n    \n\n});",
        "import \"./import-jquery.js\";\nimport \"jquery-ui-bundle\"; // you also need this\nimport \"jquery-ui-bundle/jquery-ui.css\";\nimport draw2d from \"draw2d_aprover\";\n\nexport default draw2d.shape.layout.VerticalLayout.extend({\n\n    NAME: \"symmetricKey\",\n\n    init: function (attr) {\n        this._super($.extend({ bgColor: \"#dbddde\", color: \"#d7d7d7\", stroke: 1, radius: 3, resizeable: true, }, attr));\n\n\n        this.classLabel = new draw2d.shape.basic.Label({\n            text: \"ClassName\",\n            bold: true,\n            stroke: 1,\n            fontColor: \"#FBFCFC\",\n            bgColor: \"#00C389\",\n            color:\"#009C6D\",\n            radius: this.getRadius(),\n            padding: 10,\n            resizeable: true,\n            editor: new draw2d.ui.LabelInplaceEditor()\n        });\n\n\n        this.add(this.classLabel);\n\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addInOut: function () {\n\n        var labelBitstring = new LabelRight({\n            text: \"Key 1\",\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n\n\n        var output = labelBitstring.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        output.setSemanticGroup(\"symmetrickey\");\n        output.setName(\"output_\" + labelBitstring.id);\n        output.setColor(\"#00C389\");\n        output.setBackgroundColor(\"#00C389\");\n\n\n\n\n\n\n\n        this.add(labelBitstring);\n\n        return container;\n    },\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityIn: function (txt) {\n        var label = new draw2d.shape.basic.Label({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        var input = label.createPort(\"input\");\n        input.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        input.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //var output = label.createPort(\"output\");\n\n        input.setName(\"input_\" + label.id);\n\n        return label;\n    },\n\n    /**\n     * @method\n     * Remove the entity with the given index from the DB table shape.<br>\n     * This method removes the entity without care of existing connections. Use\n     * a draw2d.command.CommandDelete command if you want to delete the connections to this entity too\n     * \n     * @param {Number} index the index of the entity to remove\n     */\n    removeEntity: function (index) {\n        this.remove(this.children.get(index + 1).figure);\n    },\n\n    /**\n     * @method\n     * Returns the entity figure with the given index\n     * \n     * @param {Number} index the index of the entity to return\n     */\n    getEntity: function (index) {\n        return this.children.get(index + 1).figure;\n    },\n\n\n    /**\n     * @method\n     * Add an entity to the db shape\n     * \n     * @param {String} txt the label to show\n     * @param {Number} [optionalIndex] index where to insert the entity\n     */\n    addEntityOut: function (txt) {\n        var label = new LabelRight({\n            text: txt,\n            stroke: 0,\n            radius: 0,\n            bgColor: null,\n            padding: { left: 10, top: 3, right: 10, bottom: 5 },\n            fontColor: \"#4a4a4a\",\n            resizeable: true,\n\n            editor: new draw2d.ui.LabelEditor()\n        });\n\n        //        label.installEditor(new draw2d.ui.LabelEditor());\n        //var input = label.createPort(\"input\");\n        var output = label.createPort(\"output\");\n        output.uninstallEditPolicy(new draw2d.policy.port.IntrusivePortsFeedbackPolicy());\n        output.installEditPolicy(new draw2d.policy.port.FlowPortsFeedbackPolicy());\n        //input.setName(\"input_\" + label.id);\n        output.setName(\"output_\" + label.id);\n\n        return label;\n    },\n\n\n\n\n\n\n\n\n\n\n    /**\n     * @method\n     * Set the name of the DB table. Visually it is the header of the shape\n     * \n     * @param name\n     */\n    setName: function (name) {\n        this.classLabel.setText(name);\n\n        return this;\n    },\n\n\n    /**\n     * @method \n     * Return an objects with all important attributes for XML or JSON serialization\n     * \n     * @returns {Object}\n     */\n    getPersistentAttributes: function () {\n        var memento = this._super();\n\n        memento.name = this.classLabel.getText();\n        memento.entities = [];\n        this.children.each(function (i, e) {\n\n            if (i > 0) { // skip the header of the figure\n                memento.entities.push({\n                    text: e.figure.getText(),\n                    id: e.figure.id\n                });\n            }\n        });\n\n        return memento;\n    },\n\n    /**\n     * @method \n     * Read all attributes from the serialized properties and transfer them into the shape.\n     *\n     * @param {Object} memento\n     * @return\n     */\n    setPersistentAttributes: function (memento) {\n        this._super(memento);\n\n        this.setName(memento.name);\n        let container = new draw2d.shape.layout.TableLayout({\n            bgColor: null,\n            color: null,\n            radius: this.getRadius(),\n            resizeable: true\n        });\n        if ((typeof memento.entitiesInput !== \"undefined\") && (typeof memento.entitiesOutput !== \"undefined\")) {\n            var lenOut = (memento.entitiesOutput).length\n\n            $.each(memento.entitiesInput, $.proxy(function (i, e) {\n                var entityin = this.addEntityIn(e.text);\n                entityin.id = e.id;\n                entityin.getInputPort(0).setName(\"input_\" + e.id);\n                //entityin.setLabelAligment(PositionConstants.LEFT);\n                if (i == 0) {\n                    container.attr({\n                        padding: { top: 5 }\n                    });\n                }\n                if (i < lenOut) {\n                    var entityout = this.addEntityOut((memento.entitiesOutput)[i].text);\n                    entityout.id = (memento.entitiesOutput)[i].id;\n                    entityout.getOutputPort(0).setName(\"output_\" + (memento.entitiesOutput)[i].id);\n                    //entityout.text-anchor = \"\";\n                    container.addRow(entityin, entityout);\n                    container.setCellAlign(i, 1, \"right\");\n                } else {\n                    container.addRow(entityin);\n                }\n\n\n\n            }, this));\n        }\n        this.add(container);\n        return this;\n    }\n\n});",
        "\r\nimport \"./import-jquery.js\";\r\nimport \"jquery-ui-bundle\"; // you also need this\r\nimport \"jquery-ui-bundle/jquery-ui.css\";\r\nimport draw2d from \"draw2d_aprover\";\r\nimport View from \"./View.js\";\r\nimport CommandDelete from \"./CommandDelete.js\";\r\n\r\n\r\nexport default Class.extend({\r\n\r\n\tNAME:'Toolbar',\r\n\r\n\tinit: function (elementIdTool, elementIdSubmit ,view) {\r\n\t\tthis.html = $(\"#\" + elementIdTool);\r\n\t\tthis.html1 = $(\"#\" + elementIdSubmit);\r\n\t\tthis.view = view;\r\n\t\tthis.elements = null;\r\n\t\t\r\n\t\t// register this class as event listener for the canvas\r\n\t\t// CommandStack. This is required to update the state of \r\n\t\t// the Undo/Redo Buttons.\r\n\t\t//\r\n\t\tview.getCommandStack().addEventListener(this);\r\n\r\n\t\t// Register a Selection listener for the state hnadling\r\n\t\t// of the Delete Button\r\n\t\t//\r\n\t\tview.on(\"select\", $.proxy(this.onSelectionChanged, this));\r\n\r\n\t\t// Inject the UNDO Button and the callbacks\r\n\t\t//\r\n\t\tthis.undoButton = $(\"<button class='gray undo'>Undo</button>\");\r\n\t\tthis.html.append(this.undoButton);\r\n\t\tthis.undoButton.click($.proxy(function () {\r\n\t\t\tthis.view.getCommandStack().undo();\r\n\t\t}, this));\r\n\r\n\t\t// Inject the REDO Button and the callback\r\n\t\t//\r\n\t\tthis.redoButton = $(\"<button class='gray redo'>Redo</button>\");\r\n\t\tthis.html.append(this.redoButton);\r\n\t\tthis.redoButton.click($.proxy(function () {\r\n\t\t\tthis.view.getCommandStack().redo();\r\n\t\t}, this));\r\n\r\n\t\tthis.delimiter = $(\"<span class='toolbar_delimiter'>&nbsp;</span>\");\r\n\t\tthis.html.append(this.delimiter);\r\n\r\n\t\t// Inject the DELETE Button\r\n\t\t//\r\n\t\tthis.deleteButton = $(\"<button class='gray delete'>Delete</button>\");\r\n\t\tthis.html.append(this.deleteButton);\r\n\t\tthis.deleteButton.click($.proxy(function () {\r\n\t\t\tvar node = this.view.getPrimarySelection();\r\n\t\t\tthis.view.removeInstance(node.NAME);\r\n\t\t\tvar command = new draw2d.command.CommandDelete(node);\r\n\t\t\tthis.view.getCommandStack().execute(command);\r\n\t\t}, this));\r\n\r\n\t\tthis.disableButton(this.undoButton, true);\r\n\t\tthis.disableButton(this.redoButton, true);\r\n\t\tthis.disableButton(this.deleteButton, true);\r\n\r\n\t\tthis.html.append($(\"<div id='toolbar_message_preview'>WAITING...</div>\"));\r\n\r\n\t\tthis.applyButton = $(\"<button class='apply'>Apply</button>\");\r\n\t\tthis.html1.append(this.applyButton);\r\n\t\tthis.applyButton.click($.proxy(function () {\r\n\t\t\tconsole.log(\"submitted\")\r\n\t\t}, this));\r\n\r\n\t\tthis.cancelButton = $(\"<button class='cancel'>Cancel</button>\");\r\n\t\tthis.html1.append(this.cancelButton);\r\n\t\tthis.cancelButton.click($.proxy(function () {\r\n\t\t\tconsole.log(\"submitted\")\r\n\t\t}, this));\r\n\t},\r\n\r\n\r\n\t/**\r\n\t * @method\r\n\t * Called if the selection in the cnavas has been changed. You must register this\r\n\t * class on the canvas to receive this event.\r\n\t *\r\n\t * @param {draw2d.Canvas} emitter\r\n\t * @param {Object} event\r\n\t * @param {draw2d.Figure} event.figure\r\n\t */\r\n\tonSelectionChanged: function (emitter, event) {\r\n\t\tthis.disableButton(this.deleteButton, event.figure === null);\r\n\t},\r\n\r\n\r\n\r\n\t/**\r\n\t * @method\r\n\t * Sent when an event occurs on the command stack. draw2d.command.CommandStackEvent.getDetail() \r\n\t * can be used to identify the type of event which has occurred.\r\n\t * \r\n\t * @template\r\n\t * \r\n\t * @param {draw2d.command.CommandStackEvent} event\r\n\t **/\r\n\tstackChanged: function (event) {\r\n\t\tthis.disableButton(this.undoButton, !event.getStack().canUndo());\r\n\t\tthis.disableButton(this.redoButton, !event.getStack().canRedo());\r\n\t\t\r\n\t},\r\n\r\n\tdisableButton: function (button, flag) {\r\n\t\tbutton.prop(\"disabled\", flag);\r\n\t\tif (flag) {\r\n\t\t\tbutton.addClass(\"disabled\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbutton.removeClass(\"disabled\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\r\n});",
        "import \"./import-jquery.js\";\r\nimport \"jquery-ui-bundle\"; // you also need this\r\nimport \"jquery-ui-bundle/jquery-ui.css\";\r\nimport draw2d from \"draw2d_aprover\";\r\nimport Parser from \"./Parser.js\";\r\nimport asymmetricEncryption from \"./asymmetricEncryption.js\";\r\nimport asymmetricPrivateKey from \"./asymmetricPrivateKey.js\"\r\nimport LabelRight from \"./LabelRight.js\";\r\nimport symmetricEncryption from \"./symmetricEncryption.js\";\r\nimport signature from \"./signature.js\";\r\nimport mac from \"./mac.js\";\r\nimport hash from \"./hash.js\";\r\nimport Group from \"./Group.js\";\r\nimport nonce from \"./nonce.js\";\r\nimport idCertificate from \"./idCertificate.js\";\r\nimport bitstring from \"./bitstring.js\";\r\nimport symmetricKey from \"./symmetricKey.js\";\r\nimport asymmetricPublicKey from \"./asymmetricPublicKey.js\";\r\nimport Message from \"./Message.js\";\r\n\r\n\r\nexport default  draw2d.Canvas.extend({\r\n\r\n    NAME:'View',\r\n  \r\n\r\n    init: function (id, parser) {\r\n        this._super(id, 2000, 2000);\r\n\r\n        this.setScrollArea(\"#\" + id);\r\n\r\n        this.parser = parser;\r\n\r\n        this.message = 0;\r\n        this.nonce = 0;\r\n        this.timestamp = 0;\r\n        this.idcert = 0;\r\n        this.bitstring = 0;\r\n        this.symkey = 0;\r\n        this.asymprivkey = 0;\r\n        this.asympubkey = 0;\r\n\r\n    },\r\n\r\n\r\n    /**\r\n     * @method\r\n     * Called if the user drop the droppedDomNode onto the canvas.<br>\r\n     * <br>\r\n     * Draw2D use the jQuery draggable/droppable lib. Please inspect\r\n     * http://jqueryui.com/demos/droppable/ for further information.\r\n     * \r\n     * @param {HTMLElement} droppedDomNode The dropped DOM element.\r\n     * @param {Number} x the x coordinate of the drop\r\n     * @param {Number} y the y coordinate of the drop\r\n     * @param {Boolean} shiftKey true if the shift key has been pressed during this event\r\n     * @param {Boolean} ctrlKey true if the ctrl key has been pressed during the event\r\n     * @private\r\n     **/\r\n    onDrop: function (droppedDomNode, x, y, shiftKey, ctrlKey) {\r\n        var type = $(droppedDomNode).data(\"shape\");\r\n        if ((this.message < 1 || type !== \"Message\") && (this.nonce < 1 || type !== \"nonce\") && (this.timestamp < 1 || type !== \"timestamp\")\r\n            && (this.idcert < 1 || type !== \"idCertificate\") && (this.bitstring < 1 || type !== \"bitstring\")\r\n            && (this.symkey < 1 || type !== \"symmetricKey\") && (this.asympubkey < 1 || type !== \"asymmetricPublicKey\")\r\n            && (this.asymprivkey < 1 || type !== \"asymmetricPrivateKey\")) {\r\n            \r\n           \r\n            var figure = eval(\"new \" + type + \"();\");\r\n            if (type === \"Message\") {\r\n                figure.addInOut(this.parser);\r\n\r\n            } else {\r\n                figure.addInOut();\r\n            }\r\n\r\n\r\n\r\n\r\n            switch (type) {\r\n                case \"symmetricEncryption\": figure.setName(\"AES\"); break;\r\n                case \"asymmetricEncryption\": figure.setName(\"RSA\"); break;\r\n                case \"signature\": figure.setName(\"DSA\"); break;\r\n                case \"mac\": figure.setName(\"mac\"); break;\r\n                case \"hash\": figure.setName(\"SHA3\"); break;\r\n                case \"Message\": figure.setName(\"Message Name\"); this.message = this.message + 1; break;\r\n                case \"Group\": figure.setName(\"Group\"); break;\r\n                case \"nonce\": figure.setName(\"nonce\"); this.nonce = this.nonce + 1; break;\r\n                case \"idCertificate\": figure.setName(\"ID Certificate\"); this.idcert = this.idcert + 1; break;\r\n                case \"bitstring\": figure.setName(\"bitstring\"); this.bitstring = this.bitstring + 1; break;\r\n                case \"timestamp\": figure.setName(\"timestamp\"); this.timestamp = this.timestamp + 1; break;\r\n                case \"symmetricKey\": figure.setName(\"Symmetric Key\"); this.symkey = this.symkey + 1; break;\r\n                case \"asymmetricPublicKey\": figure.setName(\"Asymmetric Public Key\"); this.asympubkey = this.asympubkey + 1; break;\r\n                case \"asymmetricPrivateKey\": figure.setName(\"Asymmetric Private Key\"); this.asymprivkey = this.asymprivkey + 1; break;\r\n                default: console.log(\"error 404: Type not Found\");\r\n            }\r\n\r\n            // create a command for the undo/redo support\r\n            var command = new draw2d.command.CommandAdd(this, figure, x, y);\r\n            this.getCommandStack().execute(command);\r\n        }\r\n    },\r\n\r\n    removeInstance: function (name) {\r\n        switch (name) {\r\n            case \"Message\": this.message = this.message - 1; break;\r\n            case \"nonce\": this.nonce = this.nonce - 1; break;\r\n            case \"idCertificate\": this.idcert = this.idcert - 1; break;\r\n            case \"bitstring\": this.bitstring = this.bitstring - 1; break;\r\n            case \"timestamp\": this.timestamp = this.timestamp - 1; break;\r\n            case \"symmetricKey\": this.symkey = this.symkey - 1; break;\r\n            case \"asymmetricPublicKey\": this.asympubkey = this.asympubkey - 1; break;\r\n            case \"asymmetricPrivateKey\": this.asymprivkey = this.asymprivkey - 1; break;\r\n            default: console.log(\"It's been deleted \" + name );\r\n        }\r\n\r\n    }\r\n});\r\n\r\n",
        "import * as bootstrap from \"bootstrap\";\n\nexport const initBootstrap = function (config) {\n  // Enabling tooltips\n  if (config.tooltip) {\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\n\n    tooltipTriggerList.map(function (tooltipTriggerEl) {\n      return new bootstrap.Tooltip(tooltipTriggerEl)\n    })\n  }\n\n  // Enabling popovers\n  if (config.popover) {\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'))\n\n    popoverTriggerList.map(function (popoverTriggerEl) {\n      return new bootstrap.Popover(popoverTriggerEl, {})\n    })\n  }\n\n  // Enabling toasts\n  if (config.toasts) {\n    const toastTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"toast\"]'))\n\n    toastTriggerList.map(function (toastTriggerEl) {\n      // Define the target property\n      let toastTarget = null\n\n      if (\"A\" === toastTriggerEl.nodeName) {\n        toastTarget = toastTriggerEl.href || null\n\n        if (toastTarget.includes('#')) {\n          toastTarget = `#${toastTarget.split(\"#\").pop()}`\n        } else {\n          return\n        }\n      } else if (\"BUTTON\" === toastTriggerEl.nodeName) {\n        toastTarget = toastTriggerEl.dataset.bsTarget || null\n      }\n\n      // Check if the target exists\n      const toastTargetEl = document.querySelector(toastTarget);\n\n      if (!toastTargetEl) {\n        return\n      }\n\n      // Initialize toast\n      const toast = new bootstrap.Toast(toastTargetEl, {})\n      \n      // Add click even to trigger\n      toastTriggerEl.addEventListener(\"click\", function (event) {\n        event.preventDefault();\n        toast.show()\n      })\n    })\n  }\n}\n",
        "import jquery from \"jquery\";\n\nwindow.$ = window.jQuery = jquery;"
    ],
    "names": [
        "NAME",
        "init",
        "attr",
        "this",
        "_super",
        "$",
        "extend",
        "bgColor",
        "color",
        "stroke",
        "radius",
        "resizeable",
        "classLabel",
        "text",
        "bold",
        "fontColor",
        "getRadius",
        "padding",
        "editor",
        "add",
        "addInOut",
        "labelKey",
        "left",
        "top",
        "right",
        "bottom",
        "labelKnowledge",
        "labelCiphertext",
        "LabelRight",
        "input1",
        "createPort",
        "uninstallEditPolicy",
        "installEditPolicy",
        "setSemanticGroup",
        "setName",
        "id",
        "setColor",
        "setBackgroundColor",
        "setMaxFanOut",
        "input2",
        "output",
        "container",
        "addRow",
        "on",
        "element",
        "event",
        "getConnections",
        "each",
        "i",
        "conn",
        "getTarget",
        "setValue",
        "getSource",
        "getValue",
        "addEntityIn",
        "txt",
        "label",
        "input",
        "removeEntity",
        "index",
        "remove",
        "children",
        "get",
        "figure",
        "getEntity",
        "addEntityOut",
        "name",
        "setText",
        "getPersistentAttributes",
        "memento",
        "getText",
        "entities",
        "e",
        "push",
        "setPersistentAttributes",
        "entitiesInput",
        "entitiesOutput",
        "lenOut",
        "length",
        "proxy",
        "entityin",
        "getInputPort",
        "entityout",
        "getOutputPort",
        "setCellAlign",
        "textify",
        "knowledge",
        "key",
        "getOutputPorts",
        "getChildren",
        "getPorts",
        "getInputPorts",
        "inports",
        "inport1",
        "inport2",
        "onPortValueChanged",
        "relatedPort",
        "data",
        "port",
        "labelBitstring",
        "parent",
        "getParent",
        "canvas",
        "getCanvas",
        "connections",
        "removedParentEntry",
        "indexOfChild",
        "canExecute",
        "execute",
        "redo",
        "undo",
        "console",
        "log",
        "addIndexRow",
        "setCurrentSelection",
        "reconnect",
        "getSize",
        "getIndex",
        "removeRow",
        "setter",
        "getter",
        "mouseDraggingElement",
        "currentDropTarget",
        "currentTarget",
        "onMouseDown",
        "x",
        "y",
        "shiftKey",
        "ctrlKey",
        "getBestFigure",
        "isInDragDrop",
        "onDragEnd",
        "isDraggable",
        "canDragStart",
        "onDragStart",
        "getAbsoluteX",
        "getAbsoluteY",
        "fireEvent",
        "mouseDownElement",
        "onMouseDrag",
        "dx",
        "dy",
        "dx2",
        "dy2",
        "de",
        "ct",
        "onDrag",
        "target",
        "onDragLeave",
        "draggingElement",
        "editPolicy",
        "onHoverLeave",
        "delegateTarget",
        "onDragEnter",
        "onHoverEnter",
        "p",
        "fromDocumentToCanvasCoordinate",
        "mouseDownX",
        "zoomFactor",
        "mouseDownY",
        "exc",
        "onMouseUp",
        "getCommandStack",
        "startTransaction",
        "onDrop",
        "request",
        "source",
        "command",
        "createCommand",
        "setConnection",
        "createConnection",
        "onCatch",
        "commitTransaction",
        "connection",
        "setRouter",
        "addEntity",
        "_table",
        "emitter",
        "contextMenu",
        "selector",
        "events",
        "hide",
        "callback",
        "options",
        "setTimeout",
        "onDoubleClick",
        "cmd",
        "CommandRemoveRow",
        "items",
        "updateCachedPort",
        "labelKnowledge1",
        "labelKnowledge2",
        "labelTag",
        "size",
        "temp",
        "labelDigest",
        "labelIdCert",
        "FONT_FALLBACK",
        "cachedWidth",
        "cachedHeight",
        "cachedMinWidth",
        "cachedMinHeight",
        "fontSize",
        "fontFamily",
        "outlineStroke",
        "outlineColor",
        "width",
        "height",
        "installEditor",
        "setOutlineStroke",
        "setOutlineColor",
        "setFontFamily",
        "setFontSize",
        "setFontColor",
        "setPadding",
        "setBold",
        "getOutlineStroke",
        "getOutlineColor",
        "getFontFamily",
        "getFontSize",
        "getFontColor",
        "getPadding",
        "isBold",
        "lastAppliedLabelRotation",
        "lastAppliedTextAttributes",
        "createSet",
        "paper",
        "setCanvas",
        "clearCache",
        "repaint",
        "attributes",
        "repaintBlocked",
        "shape",
        "lattr",
        "calculateTextAttr",
        "attrDiff",
        "isEmptyObject",
        "svgNodes",
        "getBBox",
        "getStroke",
        "fill",
        "hash",
        "applyTransformation",
        "ts",
        "rotationAngle",
        "transform",
        "value",
        "_this",
        "moved",
        "w",
        "font",
        "setDimension",
        "h",
        "portRelayoutRequired",
        "getMinWidth",
        "getMinHeight",
        "getWidth",
        "Math",
        "max",
        "getHeight",
        "eval",
        "start",
        "hitTest",
        "matrix",
        "points",
        "getBoundingBox",
        "getVertices",
        "point",
        "j",
        "polySides",
        "oddNodes",
        "pi",
        "pj",
        "connectionLine",
        "tweenable",
        "allPorts",
        "getAllPorts",
        "clone",
        "__beforeInflate",
        "grep",
        "Tweenable",
        "tween",
        "from",
        "to",
        "duration",
        "easing",
        "step",
        "params",
        "rx",
        "ry",
        "getShapeElement",
        "setDashArray",
        "x1",
        "ox",
        "y1",
        "oy",
        "setStartPoint",
        "setEndPoint",
        "stop",
        "dispose",
        "draggedFigure",
        "hoverFiger",
        "setGlow",
        "parser",
        "FlowPortsFeedbackPolicy",
        "CommandDelete",
        "label1",
        "entity",
        "setMessage",
        "nonce",
        "JSON",
        "parse",
        "sessionStorage",
        "getItem",
        "labelNonce",
        "Class",
        "message",
        "document",
        "getElementById",
        "innerHTML",
        "elementIdTool",
        "elementIdSubmit",
        "view",
        "html",
        "html1",
        "elements",
        "addEventListener",
        "onSelectionChanged",
        "undoButton",
        "append",
        "click",
        "redoButton",
        "delimiter",
        "deleteButton",
        "node",
        "getPrimarySelection",
        "removeInstance",
        "disableButton",
        "applyButton",
        "cancelButton",
        "stackChanged",
        "getStack",
        "canUndo",
        "canRedo",
        "button",
        "flag",
        "prop",
        "addClass",
        "removeClass",
        "setScrollArea",
        "timestamp",
        "idcert",
        "bitstring",
        "symkey",
        "asymprivkey",
        "asympubkey",
        "droppedDomNode",
        "type",
        "initBootstrap",
        "config",
        "tooltip",
        "slice",
        "call",
        "querySelectorAll",
        "map",
        "tooltipTriggerEl",
        "popover",
        "popoverTriggerEl",
        "toasts",
        "toastTriggerEl",
        "toastTarget",
        "nodeName",
        "href",
        "includes",
        "split",
        "pop",
        "dataset",
        "bsTarget",
        "toastTargetEl",
        "querySelector",
        "toast",
        "preventDefault",
        "show",
        "window",
        "jQuery"
    ],
    "sourceRoot": ""
}